'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function omitKeys(keys, object) {
  return Object.keys(object).reduce(function (cleanObject, key) {
    if (keys.includes(key)) {
      return cleanObject;
    } else {
      return _extends({}, cleanObject, _defineProperty({}, key, object[key]));
    }
  }, {});
}

exports.default = function () {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$tag = _ref.tag,
      defaultTag = _ref$tag === undefined ? 'div' : _ref$tag,
      _ref$prop = _ref.prop,
      prop = _ref$prop === undefined ? 'tag' : _ref$prop,
      _ref$propsToOmit = _ref.propsToOmit,
      propsToOmit = _ref$propsToOmit === undefined ? [] : _ref$propsToOmit;

  return function (_ref2) {
    var children = _ref2.children,
        otherProps = _objectWithoutProperties(_ref2, ['children']);

    var tag = otherProps[prop] || defaultTag;
    var omitPropsKeys = [prop].concat(_toConsumableArray(propsToOmit));
    var props = omitKeys(omitPropsKeys, otherProps);
    return _react2.default.createElement(tag, props, children);
  };
};