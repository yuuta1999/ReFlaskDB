var _templateObject = _taggedTemplateLiteral(['\n    display: flex;\n    ', '\n    ', '\n    ', '\n    ', '\n  '], ['\n    display: flex;\n    ', '\n    ', '\n    ', '\n    ', '\n  ']);

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/* eslint-disable no-shadow */
import { css } from 'styled-components';
import { map } from 'styled-components-breakpoint';
import '../types';

function halign(_ref) {
  var halign = _ref.halign,
      reverse = _ref.reverse;

  //if no value is specified, then don't output any css (it just makes it harder for the consumer to override)
  if (typeof halign === 'undefined' && typeof reverse === 'undefined') {
    return '';
  }

  return map(halign, function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'left';

    var rule = '';
    switch (value) {
      case 'left':
        if (reverse) {
          rule = 'flex-end';
        } else {
          rule = 'flex-start';
        }
        break;

      case 'right':
        if (reverse) {
          rule = 'flex-start';
        } else {
          rule = 'flex-end';
        }
        break;

      case 'center':
        rule = 'center';
        break;

      case 'justify-center':
        rule = 'space-around';
        break;

      case 'justify':
        rule = 'space-between';
        break;

      default:
        throw new Error('styled-components-grid: halign must be one of "left", "right", "center", "justify-center" or "justify". Got "' + String(value) + '"');
    }
    return 'justify-content: ' + rule + ';';
  });
}

function valign(_ref2) {
  var valign = _ref2.valign;

  //if no value is specified, then don't output any css (it just makes it harder for the consumer to override)
  if (typeof valign === 'undefined') {
    return '';
  }

  return map(valign, function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'stretch';

    var rule = '';
    switch (value) {
      case 'top':
        rule = 'flex-start';
        break;

      case 'bottom':
        rule = 'flex-end';
        break;

      case 'center':
        rule = 'center';
        break;

      case 'stretch':
        rule = 'stretch';
        break;

      default:
        throw new Error('styled-components-grid: valign must be one of "top", "bottom", "center" or "stretch". Got "' + String(value) + '".');
    }
    return 'align-items: ' + rule + ';';
  });
}

function reverse(_ref3) {
  var reverse = _ref3.reverse;

  //if no value is specified, then don't output any css (it just makes it harder for the consumer to override)
  if (typeof reverse === 'undefined') {
    return '';
  }

  return map(reverse, function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return 'flex-direction: ' + (value && 'row-reverse' || 'row') + ';';
  });
}

function wrap(_ref4) {
  var wrap = _ref4.wrap,
      reverse = _ref4.reverse;

  return map(wrap, function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    if (value && reverse) {
      return 'flex-wrap: wrap-reverse;';
    } else if (value === false) {
      return 'flex-wrap: nowrap;';
    } else {
      return 'flex-wrap: wrap;';
    }
  });
}

export default function (props) {
  return css(_templateObject, halign(props), valign(props), reverse(props), wrap(props));
}