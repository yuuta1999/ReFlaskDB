'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _templateObject = _taggedTemplateLiteral(['\n    box-sizing: border-box;\n    ', ' ', ';\n  '], ['\n    box-sizing: border-box;\n    ', ' ', ';\n  ']);

exports.default = function (props) {
  return (0, _styledComponents.css)(_templateObject, size(props), visible(props));
};

var _styledComponents = require('styled-components');

var _styledComponentsBreakpoint = require('styled-components-breakpoint');

require('../types');

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }
/* eslint-disable no-shadow */


function size(_ref) {
  var size = _ref.size;

  return (0, _styledComponentsBreakpoint.map)(size, function () {
    var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

    switch (value) {
      case 'min':
        return '\n          flex-grow: 0;\n          flex-basis: auto;\n          width: auto;\n          max-width: none;\n        ';

      case 'max':
        return '\n          flex-grow: 1;\n          flex-basis: auto;\n          width: auto;\n          max-width: none;\n          max-width: 100%; /* TODO: does this always work as expected? */\n        ';

      default:
        {
          var pct = Math.round((typeof value === 'number' ? value : 1) * 100 * 10000) / 10000; //round to 4 decimal places
          return '\n          flex-basis: ' + pct + '%;\n          max-width: ' + pct + '%;\n        ';
        }
    }
  });
}

function visible(_ref2) {
  var visible = _ref2.visible;

  //if no value is specified, then don't output any css (it just makes it harder for the consumer to override)
  if (typeof visible === 'undefined') {
    return '';
  }

  return (0, _styledComponentsBreakpoint.map)(visible, function (value) {
    if (value === false) {
      return 'display: none;';
    } else {
      return 'display: flex;'; /* TODO: does this always work as expected? */
    }
  });
}